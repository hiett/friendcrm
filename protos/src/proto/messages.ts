// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.19.1
// source: messages.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";

export interface FriendInteraction {
  title: string;
  description: string;
  date: Date | undefined;
  tags: string[];
}

export interface Friend {
  id: string;
  name: string;
  knowsBecause: string;
  since: Date | undefined;
  birthday: Date | undefined;
  facts: string[];
  interactions: FriendInteraction[];
}

export interface ListFriendsRequest {
  nameFilter: string;
}

export interface ListFriendsResponse {
  friends: Friend[];
}

export interface BirthdaysSoonRequest {
  daysAhead: number;
}

export interface ReconnectSoonRequest {
  minDaysSinceLastInteraction: number;
}

export interface ReconnectSuggestion {
  friend:
    | Friend
    | undefined;
  /** -1 if no interactions */
  daysSinceLastInteraction: number;
}

export interface ReconnectSoonResponse {
  suggestions: ReconnectSuggestion[];
}

export interface RemoveFriendRequest {
  id: string;
}

function createBaseFriendInteraction(): FriendInteraction {
  return { title: "", description: "", date: undefined, tags: [] };
}

export const FriendInteraction: MessageFns<FriendInteraction> = {
  encode(message: FriendInteraction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.date !== undefined) {
      Timestamp.encode(toTimestamp(message.date), writer.uint32(34).fork()).join();
    }
    for (const v of message.tags) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FriendInteraction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendInteraction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.date = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendInteraction {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      date: isSet(object.date) ? fromJsonTimestamp(object.date) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: FriendInteraction): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.date !== undefined) {
      obj.date = message.date.toISOString();
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create(base?: DeepPartial<FriendInteraction>): FriendInteraction {
    return FriendInteraction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FriendInteraction>): FriendInteraction {
    const message = createBaseFriendInteraction();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.date = object.date ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseFriend(): Friend {
  return { id: "", name: "", knowsBecause: "", since: undefined, birthday: undefined, facts: [], interactions: [] };
}

export const Friend: MessageFns<Friend> = {
  encode(message: Friend, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.knowsBecause !== "") {
      writer.uint32(26).string(message.knowsBecause);
    }
    if (message.since !== undefined) {
      Timestamp.encode(toTimestamp(message.since), writer.uint32(34).fork()).join();
    }
    if (message.birthday !== undefined) {
      Timestamp.encode(toTimestamp(message.birthday), writer.uint32(42).fork()).join();
    }
    for (const v of message.facts) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.interactions) {
      FriendInteraction.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Friend {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.knowsBecause = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.since = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.birthday = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.facts.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.interactions.push(FriendInteraction.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Friend {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      knowsBecause: isSet(object.knowsBecause) ? globalThis.String(object.knowsBecause) : "",
      since: isSet(object.since) ? fromJsonTimestamp(object.since) : undefined,
      birthday: isSet(object.birthday) ? fromJsonTimestamp(object.birthday) : undefined,
      facts: globalThis.Array.isArray(object?.facts) ? object.facts.map((e: any) => globalThis.String(e)) : [],
      interactions: globalThis.Array.isArray(object?.interactions)
        ? object.interactions.map((e: any) => FriendInteraction.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Friend): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.knowsBecause !== "") {
      obj.knowsBecause = message.knowsBecause;
    }
    if (message.since !== undefined) {
      obj.since = message.since.toISOString();
    }
    if (message.birthday !== undefined) {
      obj.birthday = message.birthday.toISOString();
    }
    if (message.facts?.length) {
      obj.facts = message.facts;
    }
    if (message.interactions?.length) {
      obj.interactions = message.interactions.map((e) => FriendInteraction.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Friend>): Friend {
    return Friend.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Friend>): Friend {
    const message = createBaseFriend();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.knowsBecause = object.knowsBecause ?? "";
    message.since = object.since ?? undefined;
    message.birthday = object.birthday ?? undefined;
    message.facts = object.facts?.map((e) => e) || [];
    message.interactions = object.interactions?.map((e) => FriendInteraction.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListFriendsRequest(): ListFriendsRequest {
  return { nameFilter: "" };
}

export const ListFriendsRequest: MessageFns<ListFriendsRequest> = {
  encode(message: ListFriendsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nameFilter !== "") {
      writer.uint32(10).string(message.nameFilter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFriendsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFriendsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nameFilter = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFriendsRequest {
    return { nameFilter: isSet(object.nameFilter) ? globalThis.String(object.nameFilter) : "" };
  },

  toJSON(message: ListFriendsRequest): unknown {
    const obj: any = {};
    if (message.nameFilter !== "") {
      obj.nameFilter = message.nameFilter;
    }
    return obj;
  },

  create(base?: DeepPartial<ListFriendsRequest>): ListFriendsRequest {
    return ListFriendsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFriendsRequest>): ListFriendsRequest {
    const message = createBaseListFriendsRequest();
    message.nameFilter = object.nameFilter ?? "";
    return message;
  },
};

function createBaseListFriendsResponse(): ListFriendsResponse {
  return { friends: [] };
}

export const ListFriendsResponse: MessageFns<ListFriendsResponse> = {
  encode(message: ListFriendsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.friends) {
      Friend.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFriendsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFriendsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.friends.push(Friend.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFriendsResponse {
    return {
      friends: globalThis.Array.isArray(object?.friends) ? object.friends.map((e: any) => Friend.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListFriendsResponse): unknown {
    const obj: any = {};
    if (message.friends?.length) {
      obj.friends = message.friends.map((e) => Friend.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListFriendsResponse>): ListFriendsResponse {
    return ListFriendsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFriendsResponse>): ListFriendsResponse {
    const message = createBaseListFriendsResponse();
    message.friends = object.friends?.map((e) => Friend.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBirthdaysSoonRequest(): BirthdaysSoonRequest {
  return { daysAhead: 0 };
}

export const BirthdaysSoonRequest: MessageFns<BirthdaysSoonRequest> = {
  encode(message: BirthdaysSoonRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.daysAhead !== 0) {
      writer.uint32(8).int32(message.daysAhead);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BirthdaysSoonRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBirthdaysSoonRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.daysAhead = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BirthdaysSoonRequest {
    return { daysAhead: isSet(object.daysAhead) ? globalThis.Number(object.daysAhead) : 0 };
  },

  toJSON(message: BirthdaysSoonRequest): unknown {
    const obj: any = {};
    if (message.daysAhead !== 0) {
      obj.daysAhead = Math.round(message.daysAhead);
    }
    return obj;
  },

  create(base?: DeepPartial<BirthdaysSoonRequest>): BirthdaysSoonRequest {
    return BirthdaysSoonRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BirthdaysSoonRequest>): BirthdaysSoonRequest {
    const message = createBaseBirthdaysSoonRequest();
    message.daysAhead = object.daysAhead ?? 0;
    return message;
  },
};

function createBaseReconnectSoonRequest(): ReconnectSoonRequest {
  return { minDaysSinceLastInteraction: 0 };
}

export const ReconnectSoonRequest: MessageFns<ReconnectSoonRequest> = {
  encode(message: ReconnectSoonRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.minDaysSinceLastInteraction !== 0) {
      writer.uint32(8).int32(message.minDaysSinceLastInteraction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReconnectSoonRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReconnectSoonRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.minDaysSinceLastInteraction = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReconnectSoonRequest {
    return {
      minDaysSinceLastInteraction: isSet(object.minDaysSinceLastInteraction)
        ? globalThis.Number(object.minDaysSinceLastInteraction)
        : 0,
    };
  },

  toJSON(message: ReconnectSoonRequest): unknown {
    const obj: any = {};
    if (message.minDaysSinceLastInteraction !== 0) {
      obj.minDaysSinceLastInteraction = Math.round(message.minDaysSinceLastInteraction);
    }
    return obj;
  },

  create(base?: DeepPartial<ReconnectSoonRequest>): ReconnectSoonRequest {
    return ReconnectSoonRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReconnectSoonRequest>): ReconnectSoonRequest {
    const message = createBaseReconnectSoonRequest();
    message.minDaysSinceLastInteraction = object.minDaysSinceLastInteraction ?? 0;
    return message;
  },
};

function createBaseReconnectSuggestion(): ReconnectSuggestion {
  return { friend: undefined, daysSinceLastInteraction: 0 };
}

export const ReconnectSuggestion: MessageFns<ReconnectSuggestion> = {
  encode(message: ReconnectSuggestion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.friend !== undefined) {
      Friend.encode(message.friend, writer.uint32(10).fork()).join();
    }
    if (message.daysSinceLastInteraction !== 0) {
      writer.uint32(16).int32(message.daysSinceLastInteraction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReconnectSuggestion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReconnectSuggestion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.friend = Friend.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.daysSinceLastInteraction = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReconnectSuggestion {
    return {
      friend: isSet(object.friend) ? Friend.fromJSON(object.friend) : undefined,
      daysSinceLastInteraction: isSet(object.daysSinceLastInteraction)
        ? globalThis.Number(object.daysSinceLastInteraction)
        : 0,
    };
  },

  toJSON(message: ReconnectSuggestion): unknown {
    const obj: any = {};
    if (message.friend !== undefined) {
      obj.friend = Friend.toJSON(message.friend);
    }
    if (message.daysSinceLastInteraction !== 0) {
      obj.daysSinceLastInteraction = Math.round(message.daysSinceLastInteraction);
    }
    return obj;
  },

  create(base?: DeepPartial<ReconnectSuggestion>): ReconnectSuggestion {
    return ReconnectSuggestion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReconnectSuggestion>): ReconnectSuggestion {
    const message = createBaseReconnectSuggestion();
    message.friend = (object.friend !== undefined && object.friend !== null)
      ? Friend.fromPartial(object.friend)
      : undefined;
    message.daysSinceLastInteraction = object.daysSinceLastInteraction ?? 0;
    return message;
  },
};

function createBaseReconnectSoonResponse(): ReconnectSoonResponse {
  return { suggestions: [] };
}

export const ReconnectSoonResponse: MessageFns<ReconnectSoonResponse> = {
  encode(message: ReconnectSoonResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.suggestions) {
      ReconnectSuggestion.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReconnectSoonResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReconnectSoonResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.suggestions.push(ReconnectSuggestion.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReconnectSoonResponse {
    return {
      suggestions: globalThis.Array.isArray(object?.suggestions)
        ? object.suggestions.map((e: any) => ReconnectSuggestion.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReconnectSoonResponse): unknown {
    const obj: any = {};
    if (message.suggestions?.length) {
      obj.suggestions = message.suggestions.map((e) => ReconnectSuggestion.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ReconnectSoonResponse>): ReconnectSoonResponse {
    return ReconnectSoonResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReconnectSoonResponse>): ReconnectSoonResponse {
    const message = createBaseReconnectSoonResponse();
    message.suggestions = object.suggestions?.map((e) => ReconnectSuggestion.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveFriendRequest(): RemoveFriendRequest {
  return { id: "" };
}

export const RemoveFriendRequest: MessageFns<RemoveFriendRequest> = {
  encode(message: RemoveFriendRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFriendRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFriendRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveFriendRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: RemoveFriendRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveFriendRequest>): RemoveFriendRequest {
    return RemoveFriendRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveFriendRequest>): RemoveFriendRequest {
    const message = createBaseRemoveFriendRequest();
    message.id = object.id ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
